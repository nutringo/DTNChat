/*
* To change this template, choose Tools | Templates
* and open the template in the editor.
*/
package Main;

import java.awt.event.ActionEvent;
import java.io.*;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.*;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.event.ChangeListener;
import javax.swing.text.JTextComponent;

/**
*
* @author Suppanut P.
*/
public class chatForm extends javax.swing.JFrame  {

   /**
    * Creates new form chatForm
    */
    
    
   
   public chatForm(){
       
      initComponents();
      
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
   private void initComponents() {

       TextInput = new javax.swing.JTextField();
       DTNRun = new javax.swing.JButton();
       DTNSend = new javax.swing.JButton();
       jScrollPane1 = new javax.swing.JScrollPane();
       TextRecv = new javax.swing.JTextArea();
       jLabel1 = new javax.swing.JLabel();
       usernameField = new javax.swing.JTextField();
	   W w = new W(TextRecv);
       w.execute();

       setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

       DTNRun.setText("DTN Run");
       DTNRun.setToolTipText("Run DTN");
       DTNRun.addActionListener(new java.awt.event.ActionListener() {
           public void actionPerformed(java.awt.event.ActionEvent evt) {
               DTNRunActionPerformed(evt);
           }
       });

       DTNSend.setText("DTN Send");
       DTNSend.setToolTipText("Send by using dtnsend");
       DTNSend.addActionListener(new java.awt.event.ActionListener() {
           public void actionPerformed(java.awt.event.ActionEvent evt) {
               DTNSendActionPerformed(evt);
           }
       });

       TextRecv.setColumns(20);
       TextRecv.setRows(5);
       jScrollPane1.setViewportView(TextRecv);
       TextRecv.getAccessibleContext().setAccessibleName("");

       jLabel1.setText("Username");

       javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
       getContentPane().setLayout(layout);
       layout.setHorizontalGroup(
           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addGroup(layout.createSequentialGroup()
               .addContainerGap()
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                   .addComponent(TextInput, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                   .addComponent(jScrollPane1))
               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                   .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                       .addComponent(DTNSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                       .addComponent(DTNRun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                   .addComponent(jLabel1)
                   .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addContainerGap(98, Short.MAX_VALUE))
       );
       layout.setVerticalGroup(
           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addGroup(layout.createSequentialGroup()
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                   .addGroup(layout.createSequentialGroup()
                       .addContainerGap()
                       .addComponent(jLabel1)
                       .addGap(5, 5, 5)
                       .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                   .addGroup(layout.createSequentialGroup()
                       .addGap(51, 51, 51)
                       .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                   .addGroup(layout.createSequentialGroup()
                       .addComponent(DTNRun)
                       .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                       .addComponent(DTNSend))
                   .addComponent(TextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
       );

       pack();
   }// </editor-fold>                        
  
   
   
   class W extends SwingWorker<String,String>{
       private final JTextArea area;
       W(JTextArea area){
           this.area=area;
       }
     String movecmd = "mv /home/nutringo/NetBeansProjects/DTNChat/msg.txt /home/nutringo/Desktop/";
     Runtime runtimemove = Runtime.getRuntime();
    
   
       protected String doInBackground() throws Exception{
           Thread th = new Thread();
           area.append("The Text is ready to read"+"\n");
           try{
               while(true){

               try{
                   
                   BufferedReader in = new BufferedReader(new FileReader("msg.txt"));
                   String s;
                   s=in.readLine();
                   publish(s);
                   th.sleep(5000);
                   move();
                   
                    }catch(IOException e){System.out.println("File not found");}
               
              
               }
           }catch(InterruptedException e){}
             return "done";
           
            }
         
      
           
          
          
       protected void process(List<String> chunks)
       {
           for (String c : chunks) 
               area.append(c+"\n");
           
       }
       
       protected void move()
       {
            try{
         Process processmove = runtimemove.exec(movecmd);
			}catch(IOException e){ e.printStackTrace();}
	   }
       
       protected void done(){
           try{
              
           }catch(Exception e){ e.printStackTrace();}
       }
   }


   private void DTNRunActionPerformed(java.awt.event.ActionEvent evt) {                                       
       // TODO add your handling code here:
       String command1 = "dtnd -c /etc/dtn.conf";
       Runtime runtime = Runtime.getRuntime();
       
       try{
           Process process = runtime.exec(command1);
           BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
           String line;
           while((line=reader.readLine())!=null)
           {
               System.out.println(line);
           }
       }catch(IOException e){
           e.printStackTrace();
       }
       

       //DTN Receive Here
   }                                      

   
   private void DTNSendActionPerformed(java.awt.event.ActionEvent evt) {                                        
       // TODO add your handling code here:
       String text = "";
       String name = usernameField.getText();
       text = name.toString()+ ":"+ TextInput.getText().toString();
       
       try{
           FileWriter fstream = new FileWriter("msg.txt");
           BufferedWriter out = new BufferedWriter(fstream);
           out.write(text);
           out.close();
       }catch(IOException e)
       {
           e.printStackTrace();
       }
       TextInput.setText("");
      
      
       try{ //Show what sender type
           BufferedReader ins = new BufferedReader(new FileReader("msg.txt"));
           String Stream;
           while((Stream = ins.readLine())!=null)
           {
               TextRecv.append(Stream+"\n");
           }
       }catch(IOException e){ e.printStackTrace();}
       
       String sendcmd = "dtncp NetBeansProjects/DTNChat/msg.txt dtn://ntl.dtn";
       Runtime runtime1 = Runtime.getRuntime();
       try{
           Process process1 =runtime1.exec(sendcmd);
       }catch(IOException e)
       {
           e.printStackTrace();
       }
       
      }                                       
   
  
   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
    final JTextArea area = new JTextArea();
    W w = new chatForm().new W(area);
    w.execute();
    
    
   
     
      
  
       
       /*
        * Set the Nimbus look and feel
        */
       //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
       /*
        * If Nimbus (introduced in Java SE 6) is not available, stay with the
        * default look and feel. For details see
        * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
       try {
          
           for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
               if ("Nimbus".equals(info.getName())) {
                   javax.swing.UIManager.setLookAndFeel(info.getClassName());
                   break;
               }
           }
       } catch (ClassNotFoundException ex) {
           java.util.logging.Logger.getLogger(chatForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       } catch (InstantiationException ex) {
           java.util.logging.Logger.getLogger(chatForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       } catch (IllegalAccessException ex) {
           java.util.logging.Logger.getLogger(chatForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       } catch (javax.swing.UnsupportedLookAndFeelException ex) {
           java.util.logging.Logger.getLogger(chatForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       }
       //</editor-fold>
    
       /*
        * Create and display the form
        */
       //(new Thread(new chatForm())).start();
       java.awt.EventQueue.invokeLater(new Runnable() {
           
           public void run() {
               new chatForm().setVisible(true);
               
           }
       });
   }
          
   
   
   // Variables declaration - do not modify                     
   private javax.swing.JButton DTNRun;
   private javax.swing.JButton DTNSend;
   private javax.swing.JTextField TextInput;
   private javax.swing.JTextArea TextRecv;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JTextField usernameField;
   // End of variables declaration                   
}


